 
.student
{
    border: 2px solid black;
    border-radius: 20px;
}

.container {
    margin-top: 50px;
}

h1 {
    text-align: center;
    margin-bottom: 30px;
    color: #007bff;
}

.form-group {
    margin-bottom: 20px;
}

.form-control {
    border-radius: 0.25rem;
    box-shadow: none;
    border: 1px solid #ced4da;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
}

.btn-primary {
    background-color: #007bff;
    border-color: #007bff;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 0.25rem;
}

.btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
}

.form-label {
    font-weight: bold;
    color: #333;
}

.container .row {
    display: flex;
    justify-content: center;
}

.col-md-8 {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

@media (max-width: 768px) {
    .col-md-8 {
        padding: 15px;
    }
}

@media (max-width: 576px) {
    .container {
        margin-top: 20px;
    }
} 


.form-label.required::after {
    content: "*";
    color: red;
    margin-left: 5px;
}











 




/* 
const handleSubmit = async (e) => {
    e.preventDefault();
    console.log('Form Data Submitted:', formData);

    try {
        // Check for required fields
        if (!name || !email || !password || !phone || !gender) {
            setNameError(name ? "" : "Name is required");
            setEmailError(email ? "" : "Email is required");
            setPasswordError(password ? "" : "Password is required");
            setPhoneError(phone ? "" : "Phone number is required");
            setGenderError(gender ? "" : "Gender is required");
            setProfileError(profile ? "" : "Profile is missing");
            toast.error("Please fill out all required fields.");
            return;
        }

        // Prepare form data
        const formData = new FormData();
        formData.append('name', name);
        formData.append('email', email);
        formData.append('password', password);
        formData.append('phone', phone);
        formData.append('gender', gender);
        if (profile) {
            formData.append('profile', profile);
        }

        // Send POST request
        const res = await axios.post('http://localhost:3003/User/register', formData, {
            headers: {
                'Content-Type': 'multipart/form-data', // Important for file uploads
            },
        });

        console.log(res.data.message, "data");

        if (res.data.message === 'User Added') {
            toast.success("Registration successfully!");
            setTimeout(() => {
                navi('/');
            }, 8000);
        } else {
            console.log("Response data:", res);
        }

    } catch (error) {
        // Handle errors based on status code
        if (error.response) {
            const { status, data } = error.response;
            if (status === 400) {
                toast.error(data.errors[0]);
            } else if (status === 401) {
                toast.error(data.message);
            } else {
                toast.error(data.message);
            }
        } else {
            toast.error("An unexpected error occurred.");
        }
    }
};
 */
